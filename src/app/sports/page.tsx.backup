'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import Footer from '@/components/Footer';
import DatabaseDiagnostic from '@/components/DatabaseDiagnostic';
import CacheStatus from '@/components/CacheStatus';
import InfiniteScrollLoader from '@/components/InfiniteScrollLoader';
import CacheDebugger from '@/components/CacheDebugger';
import { useEventsLoader } from '@/hooks/useEventsLoader';
import { LiveScore } from '@/types/sports';
import { getTeamLogo, isImageUrl } from '@/lib/teamLogos';

interface SportCategory {
  id: string;
  name: string;
  icon: string;
  logo: string;
  description: string;
  activeGames: number;
  upcomingGames: number;
  totalVolume: string;
  popularLeagues: string[];
  color: string;
  bgColor: string;
}

interface UpcomingGame {
  id: string;
  sport: string;
  sportIcon: string;
  league: string;
  homeTeam: string;
  awayTeam: string;
  homeTeamLogo: string;
  awayTeamLogo: string;
  date: string;
  time: string;
  venue: string;
  status: 'upcoming' | 'live' | 'soon';
  minutesToStart: number;
  odds: {
    home: string;
    draw?: string;
    away: string;
  };
  totalBets: number;
  volume: string;
  color: string;
  bgColor: string;
}

const sportsCategories: SportCategory[] = [
  {
    id: 'futbol',
    name: 'F√∫tbol',
    icon: '‚öΩ',
    logo: '‚öΩ',
    description: 'El deporte m√°s popular del mundo con ligas de √©lite',
    activeGames: 45,
    upcomingGames: 127,
    totalVolume: '$2.4M',
    popularLeagues: ['Champions League', 'Premier League', 'La Liga', 'Serie A'],
    color: 'text-green-400',
    bgColor: 'from-green-900/20 to-green-800/10'
  },
  {
    id: 'baloncesto',
    name: 'Baloncesto',
    icon: 'üèÄ',
    logo: 'üèÄ',
    description: 'NBA, Euroliga y competencias internacionales',
    activeGames: 32,
    upcomingGames: 89,
    totalVolume: '$1.8M',
    popularLeagues: ['NBA', 'Euroliga', 'NCAA', 'FIBA'],
    color: 'text-orange-400',
    bgColor: 'from-orange-900/20 to-orange-800/10'
  },
  {
    id: 'futbol-americano',
    name: 'F√∫tbol Americano',
    icon: 'üèà',
    logo: 'üèà',
    description: 'NFL, College Football y competencias profesionales',
    activeGames: 22,
    upcomingGames: 64,
    totalVolume: '$1.2M',
    popularLeagues: ['NFL', 'NCAA', 'CFL', 'XFL'],
    color: 'text-purple-400',
    bgColor: 'from-purple-900/20 to-purple-800/10'
  },
  {
    id: 'beisbol',
    name: 'B√©isbol',
    icon: '‚öæ',
    logo: '‚öæ',
    description: 'MLB, Ligas Menores y competencias internacionales',
    activeGames: 18,
    upcomingGames: 203,
    totalVolume: '$750K',
    popularLeagues: ['MLB', 'NPB', 'KBO', 'Caribbean Series'],
    color: 'text-red-400',
    bgColor: 'from-red-900/20 to-red-800/10'
  },
  {
    id: 'mma',
    name: 'MMA',
    icon: 'ü•ä',
    logo: 'ü•ä',
    description: 'UFC, Bellator y competencias de artes marciales mixtas',
    activeGames: 12,
    upcomingGames: 45,
    totalVolume: '$650K',
    popularLeagues: ['UFC', 'Bellator', 'ONE Championship', 'PFL'],
    color: 'text-yellow-400',
    bgColor: 'from-yellow-900/20 to-yellow-800/10'
  },
];

// Datos mock de juegos pr√≥ximos
const upcomingGames: UpcomingGame[] = [
  {
    id: '1',
    sport: 'F√∫tbol',
    sportIcon: '‚öΩ',
    league: 'Premier League',
    homeTeam: 'Manchester City',
    awayTeam: 'Liverpool',
    homeTeamLogo: getTeamLogo('Manchester City'),
    awayTeamLogo: getTeamLogo('Liverpool'),
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    time: '17:30',
    venue: 'Etihad Stadium',
    status: 'soon',
    minutesToStart: 45,
    odds: { home: '2.10', draw: '3.40', away: '3.20' },
    totalBets: 1247,
    volume: '$89.4K',
    color: 'text-green-400',
    bgColor: 'from-green-900/20 to-green-800/10'
  },
  {
    id: '2',
    sport: 'Baloncesto',
    sportIcon: 'üèÄ',
    league: 'NBA',
    homeTeam: 'Lakers',
    awayTeam: 'Warriors',
    homeTeamLogo: getTeamLogo('Lakers'),
    awayTeamLogo: getTeamLogo('Warriors'),
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    time: '22:30',
    venue: 'Crypto.com Arena',
    status: 'upcoming',
    minutesToStart: 180,
    odds: { home: '1.95', away: '1.85' },
    totalBets: 892,
    volume: '$67.2K',
    color: 'text-orange-400',
    bgColor: 'from-orange-900/20 to-orange-800/10'
  },
  {
    id: '3',
    sport: 'F√∫tbol',
    sportIcon: '‚öΩ',
    league: 'La Liga',
    homeTeam: 'Real Madrid',
    awayTeam: 'Barcelona',
    homeTeamLogo: getTeamLogo('Real Madrid'),
    awayTeamLogo: getTeamLogo('Barcelona'),
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    time: '20:00',
    venue: 'Santiago Bernab√©u',
    status: 'live',
    minutesToStart: 0,
    odds: { home: '2.30', draw: '3.10', away: '2.90' },
    totalBets: 2156,
    volume: '$124.8K',
    color: 'text-green-400',
    bgColor: 'from-green-900/20 to-green-800/10'
  },
  {
    id: '4',
    sport: 'F√∫tbol Americano',
    sportIcon: 'üèà',
    league: 'NFL',
    homeTeam: 'Chiefs',
    awayTeam: 'Ravens',
    homeTeamLogo: getTeamLogo('Chiefs'),
    awayTeamLogo: getTeamLogo('Ravens'),
    date: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    time: '21:00',
    venue: 'Arrowhead Stadium',
    status: 'soon',
    minutesToStart: 90,
    odds: { home: '1.75', away: '2.05' },
    totalBets: 1687,
    volume: '$156.3K',
    color: 'text-purple-400',
    bgColor: 'from-purple-900/20 to-purple-800/10'
  },
  {
    id: '5',
    sport: 'Baloncesto',
    sportIcon: 'üèÄ',
    league: 'NBA',
    homeTeam: 'Celtics',
    awayTeam: 'Heat',
    homeTeamLogo: getTeamLogo('Celtics'),
    awayTeamLogo: getTeamLogo('Heat'),
    date: '2024-01-29',
    time: '19:00',
    venue: 'TD Garden',
    status: 'upcoming',
    minutesToStart: 1200,
    odds: { home: '1.70', away: '2.10' },
    totalBets: 634,
    volume: '$38.9K',
    color: 'text-orange-400',
    bgColor: 'from-orange-900/20 to-orange-800/10'
  },
  {
    id: '6',
    sport: 'B√©isbol',
    sportIcon: '‚öæ',
    league: 'MLB Spring',
    homeTeam: 'Yankees',
    awayTeam: 'Red Sox',
    homeTeamLogo: getTeamLogo('Yankees'),
    awayTeamLogo: getTeamLogo('Red Sox'),
    date: '2024-01-29',
    time: '13:05',
    venue: 'Yankee Stadium',
    status: 'upcoming',
    minutesToStart: 960,
    odds: { home: '1.85', away: '1.95' },
    totalBets: 567,
    volume: '$34.2K',
    color: 'text-red-400',
    bgColor: 'from-red-900/20 to-red-800/10'
  }
];

export default function SportsPage() {
  const searchParams = useSearchParams();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedLeague, setSelectedLeague] = useState<string>('all');
  const [selectedSport, setSelectedSport] = useState<string>('all');
  const [showSidebar, setShowSidebar] = useState(false);
  const [mounted, setMounted] = useState(false);

  // Manejar hidrataci√≥n para evitar errores de SSR
  useEffect(() => {
    setMounted(true);
  }, []);

  // Hook para carga progresiva de eventos con cache
  const {
    filteredEvents,
    loading,
    loadingMore,
    initialLoading,
    hasMore,
    totalEvents,
    currentPage,
    loadMore,
    searchEvents,
    filterEvents,
    refreshEvents,
    cacheStats,
    error
  } = useEventsLoader();
  
  // Obtener par√°metros de URL
  const sportFilter = searchParams.get('sport');
  const gameCount = searchParams.get('gameCount') ? parseInt(searchParams.get('gameCount')!) : 1;

  // Manejar b√∫squeda de eventos
  const handleSearch = (query: string) => {
    setSearchTerm(query);
    searchEvents(query);
  };

  // Manejar filtros
  const handleFilter = () => {
    const filters: any = {};
    if (selectedSport !== 'all') filters.sport = selectedSport;
    if (selectedLeague !== 'all') filters.league = selectedLeague;
    filterEvents(filters);
  };

  // Aplicar filtros cuando cambien
  useEffect(() => {
    handleFilter();
  }, [selectedSport, selectedLeague]);

  // Obtener ligas √∫nicas de los eventos filtrados
  const availableLeagues = useMemo(() => {
    const leagues = new Set<string>();
    filteredEvents?.forEach(event => {
      if (event?.league) {
        leagues.add(event.league);
      }
    });
    return Array.from(leagues).sort();
  }, [filteredEvents]);

  // Obtener deportes √∫nicos de los eventos filtrados
  const availableSports = useMemo(() => {
    const sports = new Set<string>();
    filteredEvents?.forEach(event => {
      if (event?.sport) {
        sports.add(event.sport);
      }
    });
    return Array.from(sports).sort();
  }, [filteredEvents]);

  // Mapear nombres de deportes de la API a las categor√≠as definidas
  const getSportData = (sportFromApi: string) => {
    const sportMappings: { [key: string]: string } = {
      'football': 'futbol',
      'basketball': 'baloncesto', 
      'american football': 'futbol-americano',
      'baseball': 'beisbol',
      'mma': 'mma'
    }
    
    const mappedId = sportMappings[sportFromApi.toLowerCase()] || sportFromApi.toLowerCase()
    return sportsCategories.find(s => s.id === mappedId) || {
      id: sportFromApi,
      name: sportFromApi.charAt(0).toUpperCase() + sportFromApi.slice(1),
      icon: '‚öΩ',
      color: 'text-blue-400',
      bgColor: 'from-blue-900/20 to-blue-800/10'
    }
  };

  // Convertir LiveScore a UpcomingGame para compatibilidad
  const convertToUpcomingGame = (liveScore: LiveScore): UpcomingGame => {
    // Mapeo de iconos deportivos
    const sportIcons: Record<string, string> = {
      'F√∫tbol': '‚öΩ', 'Football': '‚öΩ', 'Soccer': '‚öΩ',
      'Baloncesto': 'üèÄ', 'Basketball': 'üèÄ',
      'F√∫tbol Americano': 'üèà', 'American Football': 'üèà',
      'B√©isbol': '‚öæ', 'Baseball': '‚öæ',
      'MMA': 'ü•ä', 'Hockey': 'üèí', 'Tenis': 'üéæ',
      'Voleibol': 'üèê', 'Rugby': 'üèâ', 'Golf': '‚õ≥',
      'Cricket': 'üèè', 'Motorsport': 'üèéÔ∏è'
    };

    // Mapeo de colores deportivos
    const sportColors: Record<string, { color: string; bgColor: string }> = {
      'F√∫tbol': { color: 'text-green-400', bgColor: 'from-green-900/20 to-green-800/10' },
      'Baloncesto': { color: 'text-orange-400', bgColor: 'from-orange-900/20 to-orange-800/10' },
      'F√∫tbol Americano': { color: 'text-purple-400', bgColor: 'from-purple-900/20 to-purple-800/10' },
      'B√©isbol': { color: 'text-red-400', bgColor: 'from-red-900/20 to-red-800/10' },
      'MMA': { color: 'text-yellow-400', bgColor: 'from-yellow-900/20 to-yellow-800/10' },
      'Hockey': { color: 'text-blue-400', bgColor: 'from-blue-900/20 to-blue-800/10' },
      'Tenis': { color: 'text-cyan-400', bgColor: 'from-cyan-900/20 to-cyan-800/10' }
    };

    const sport = liveScore.sport || 'Deporte';
    const colors = sportColors[sport] || { color: 'text-gray-400', bgColor: 'from-gray-900/20 to-gray-800/10' };

    return {
      id: liveScore.id.toString(),
      sport: sport,
      sportIcon: sportIcons[sport] || 'üèÜ',
      league: liveScore.league || 'Liga',
      homeTeam: liveScore.homeTeam || 'Equipo Local',
      awayTeam: liveScore.awayTeam || 'Equipo Visitante',
      homeTeamLogo: getTeamLogo(liveScore.homeTeam || 'Equipo Local'),
      awayTeamLogo: getTeamLogo(liveScore.awayTeam || 'Equipo Visitante'),
      date: liveScore.date ? new Date(liveScore.date).toISOString().split('T')[0] : new Date().toISOString().split('T')[0],
      time: liveScore.time || 'TBD',
      venue: 'Stadium',
      status: liveScore.status?.includes('Live') ? 'live' : 
              liveScore.status?.includes('Finished') ? 'upcoming' : 'soon',
      minutesToStart: Math.floor(Math.random() * 180),
      odds: {
        home: '2.10',
        draw: sport === 'F√∫tbol' ? '3.20' : undefined,
        away: '1.85'
      },
      totalBets: Math.floor(Math.random() * 500) + 100,
      volume: `$${(Math.random() * 100 + 20).toFixed(1)}K`,
      ...colors
    };
  };

  // Convertir eventos para mostrar
  const displayedGames = filteredEvents.map(convertToUpcomingGame);

  return (
    <div className="min-h-screen bg-[#1a1d29] text-white">
      {/* Cache Debugger */}
      <CacheDebugger />
      
      {/* Header espacio reservado */}
      <div className="h-16 bg-[#1a1d29] relative z-50"></div>
      
      <div className="flex relative">
        {/* Sidebar izquierda - Ligas */}
        <div className="hidden">
          
          {/* Header moderno */}
          <div className="p-4 border-b border-white/10">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <div className="w-6 h-6 bg-gradient-to-r from-emerald-400 to-blue-500 rounded-lg flex items-center justify-center">
                  <svg className="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z"/>
                  </svg>
                </div>
                <div>
                  <h3 className="text-xs font-bold text-white">Competiciones</h3>
                </div>
              </div>
              <div className="bg-emerald-500/20 px-2 py-1 rounded-md">
                <span className="text-xs font-semibold text-emerald-400">{availableLeagues.length}</span>
              </div>
            </div>
            
            {/* Bot√≥n Todas las Ligas moderno */}
            <button
              onClick={() => setSelectedLeague('all')}
              className={`group w-full p-2 rounded-lg transition-all duration-200 ${
                selectedLeague === 'all' 
                  ? 'bg-gradient-to-r from-emerald-500/20 to-blue-500/20 border border-emerald-400/30 shadow-lg' 
                  : 'bg-white/5 border border-white/10 hover:bg-white/10 hover:border-white/20'
              }`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className={`w-6 h-6 rounded-lg flex items-center justify-center ${
                    selectedLeague === 'all' ? 'bg-emerald-400/20' : 'bg-white/10'
                  }`}>
                    <svg className={`w-4 h-4 ${selectedLeague === 'all' ? 'text-emerald-400' : 'text-gray-400'}`} fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM4.332 8.027a6.012 6.012 0 011.912-2.706C6.512 5.73 6.974 6 7.5 6A1.5 1.5 0 019 7.5V8a2 2 0 004 0 2 2 0 011.523-1.943A5.977 5.977 0 0116 10c0 .34-.028.675-.083 1H15a2 2 0 00-2 2v2.197A5.973 5.973 0 0110 16v-2a2 2 0 00-2-2 2 2 0 01-2-2 2 2 0 00-1.668-1.973z"/>
                    </svg>
                  </div>
                  <div className="text-left">
                    <div className={`text-sm font-medium ${selectedLeague === 'all' ? 'text-emerald-400' : 'text-gray-200'}`}>
                      Todas las ligas
                    </div>
                  </div>
                </div>
                <div className={`text-xs font-bold px-2 py-1 rounded-md ${
                  selectedLeague === 'all' 
                    ? 'bg-emerald-400/20 text-emerald-400' 
                    : 'bg-white/10 text-gray-400'
                }`}>
                  {filteredEvents?.length || 0}
                </div>
              </div>
            </button>
          </div>

          {/* Lista de ligas moderna */}
          <div className="p-3 space-y-1">
            {availableLeagues.filter(league => {
              const popularLeagues = ['Premier League', 'La Liga', 'Serie A', 'Bundesliga', 'NBA', 'NFL', 'MLB', 'Champions League'];
              return popularLeagues.includes(league);
            }).slice(0, 6).map(league => {
              const leagueGames = filteredEvents?.filter(game => game?.league === league) || [];
              
              const leagueData = {
                'Premier League': { icon: 'üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø', color: 'from-purple-500/20 to-indigo-500/20', border: 'border-purple-400/30', text: 'text-purple-400', bg: 'bg-purple-400/20' },
                'La Liga': { icon: 'üá™üá∏', color: 'from-red-500/20 to-orange-500/20', border: 'border-red-400/30', text: 'text-red-400', bg: 'bg-red-400/20' },
                'Serie A': { icon: 'üáÆüáπ', color: 'from-green-500/20 to-teal-500/20', border: 'border-green-400/30', text: 'text-green-400', bg: 'bg-green-400/20' },
                'Bundesliga': { icon: 'üá©üá™', color: 'from-yellow-500/20 to-amber-500/20', border: 'border-yellow-400/30', text: 'text-yellow-400', bg: 'bg-yellow-400/20' },
                'NBA': { icon: 'üèÄ', color: 'from-orange-500/20 to-red-500/20', border: 'border-orange-400/30', text: 'text-orange-400', bg: 'bg-orange-400/20' },
                'NFL': { icon: 'üèà', color: 'from-blue-500/20 to-indigo-500/20', border: 'border-blue-400/30', text: 'text-blue-400', bg: 'bg-blue-400/20' },
                'MLB': { icon: '‚öæ', color: 'from-emerald-500/20 to-cyan-500/20', border: 'border-emerald-400/30', text: 'text-emerald-400', bg: 'bg-emerald-400/20' },
                'Champions League': { icon: 'üèÜ', color: 'from-violet-500/20 to-purple-500/20', border: 'border-violet-400/30', text: 'text-violet-400', bg: 'bg-violet-400/20' }
              };
              
              const data = leagueData[league as keyof typeof leagueData] || { icon: 'üèÜ', color: 'from-gray-500/20 to-gray-400/20', border: 'border-gray-400/30', text: 'text-gray-400', bg: 'bg-gray-400/20' };
              
              return (
                <button
                  key={league}
                  onClick={() => setSelectedLeague(league)}
                  className={`group w-full p-2 rounded-lg transition-all duration-200 hover:scale-[1.01] ${
                    selectedLeague === league 
                      ? `bg-gradient-to-r ${data.color} border ${data.border} shadow-lg` 
                      : 'bg-white/5 border border-transparent hover:bg-white/10 hover:border-white/20'
                  }`}
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className={`w-6 h-6 rounded-lg flex items-center justify-center ${
                        selectedLeague === league ? data.bg : 'bg-white/10'
                      }`}>
                        <span className="text-sm">{data.icon}</span>
                      </div>
                      <div className="text-left flex-1 min-w-0">
                        <div className={`text-sm font-medium truncate ${
                          selectedLeague === league ? data.text : 'text-gray-200 group-hover:text-white'
                        }`}>
                          {league}
                        </div>
                        <div className="text-xs text-gray-500">
                          {leagueGames.length} evento{leagueGames.length !== 1 ? 's' : ''}
                        </div>
                      </div>
                    </div>
                    <div className={`text-xs font-bold px-2 py-1 rounded-md ${
                      selectedLeague === league 
                        ? `${data.bg} ${data.text}` 
                        : 'bg-white/10 text-gray-400 group-hover:bg-white/20'
                    }`}>
                      {leagueGames.length}
                    </div>
                  </div>
                </button>
              );
            })}
            
            {availableLeagues.length === 0 && (
              <div className="text-center py-8">
                <div className="w-12 h-12 bg-gray-800/50 rounded-full flex items-center justify-center mx-auto mb-3">
                  <span className="text-xl opacity-50">üèÜ</span>
                </div>
                <p className="text-sm text-gray-500">No hay ligas disponibles</p>
              </div>
            )}
          </div>

        </div>

        {/* Overlay para m√≥vil */}
        {showSidebar && (
          <div 
            className="fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden"
            onClick={() => setShowSidebar(false)}
          />
        )}

        {/* Contenido principal */}
        <div className="flex-1 relative z-20">
          {/* Bot√≥n de men√∫ m√≥vil */}
          <div className="hidden">
            <button
              onClick={() => setShowSidebar(!showSidebar)}
              className="group bg-gradient-to-r from-[#2a2d47] to-[#252847] border border-gray-600/50 rounded-xl p-4 flex items-center space-x-3 hover:from-[#323557] hover:to-[#2a2d47] hover:border-gray-500/60 transition-all duration-200 shadow-lg hover:shadow-xl hover:scale-[1.02]"
            >
              <div className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center group-hover:scale-110 transition-transform">
                <span className="text-white text-lg">‚ò∞</span>
              </div>
              <div>
                <span className="font-semibold text-white">Ligas</span>
                <div className="text-xs text-gray-400">Ver competencias</div>
              </div>
            </button>
          </div>
          
          <div className="max-w-full mx-auto px-4 py-6">

            {/* Header */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-4">
                <div>
                  <div className="flex items-center space-x-4 mb-2">
                    <h1 className="text-4xl font-bold text-white">Deportes</h1>
                    {gameCount > 1 && (
                      <span className="bg-green-600/20 text-green-400 px-3 py-1 rounded-lg text-sm">
                        A√±adiendo Partido {gameCount} de 15
                      </span>
                    )}
                    {selectedLeague && selectedLeague !== 'all' && (
                      <span className="bg-purple-600/20 text-purple-400 px-3 py-1 rounded-lg text-sm">
                        Liga: {selectedLeague}
                      </span>
                    )}
                    {selectedSport && selectedSport !== 'all' && (
                      <span className="bg-green-600/20 text-green-400 px-3 py-1 rounded-lg text-sm">
                        Deporte: {selectedSport}
                      </span>
                    )}
                  </div>
                  <p className="text-gray-400">
                    ‚ú® {mounted ? totalEvents.toLocaleString() : '0'} eventos deportivos disponibles ‚Ä¢ {mounted ? filteredEvents.length.toLocaleString() : '0'} filtrados ‚Ä¢ Mostrando {mounted ? displayedGames.length.toLocaleString() : '0'}
                  </p>
                  {mounted && hasMore && (
                    <p className="text-sm text-blue-400 mt-1">
                      üìÑ P√°gina {currentPage + 1} de {Math.ceil(totalEvents / 50)} ‚Ä¢ Scroll para cargar m√°s eventos autom√°ticamente
                    </p>
                  )}
                </div>
                <div className="text-right">
                  <div className="text-sm text-gray-400">Eventos Totales</div>
                  <div className="text-2xl font-bold text-white">{mounted ? totalEvents.toLocaleString() : '0'}</div>
                  {mounted && (
                    <div className="text-xs text-gray-500 mt-1">Cache: {cacheStats.cacheSize}</div>
                  )}
                </div>
              </div>

              {/* Barra horizontal de deportes */}
              <div className="mb-6">
                <div className="flex items-center space-x-3 overflow-x-auto pb-2 scrollbar-hide" 
                     style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}>
                  {/* Bot√≥n "Todos" */}
                  <button
                    onClick={() => setSelectedSport('all')}
                    className={`flex-shrink-0 flex items-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                      selectedSport === 'all'
                        ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white shadow-lg transform scale-105'
                        : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50 hover:text-white hover:scale-105'
                    }`}
                  >
                    <span className="text-lg">üèÜ</span>
                    <span className="font-medium whitespace-nowrap">Todos</span>
                  </button>

                  {/* Botones de deportes - mostrar siempre los 5 deportes principales */}
                  {mounted && sportsCategories.map((sportData) => (
                    <button
                      key={sportData.id}
                      onClick={() => setSelectedSport(sportData.id)}
                      className={`flex-shrink-0 flex items-center space-x-2 px-4 py-3 rounded-lg transition-all duration-200 ${
                        selectedSport === sportData.id
                          ? `bg-gradient-to-r ${sportData.bgColor} ${sportData.color} shadow-lg transform scale-105`
                          : 'bg-gray-800/50 text-gray-300 hover:bg-gray-700/50 hover:text-white hover:scale-105'
                      }`}
                    >
                      <span className="text-lg">{sportData.icon}</span>
                      <span className="font-medium whitespace-nowrap">{sportData.name}</span>
                    </button>
                  ))}
                </div>
              </div>

            </div>


            {/* Loading State */}
            {initialLoading && (
              <div className="flex items-center justify-center py-20">
                <div className="text-center">
                  <div className="w-16 h-16 border-4 border-blue-500/30 border-t-blue-500 rounded-full animate-spin mx-auto mb-4"></div>
                  <div className="text-xl font-semibold text-white mb-2">Cargando eventos deportivos...</div>
                  <div className="text-gray-400">
                    Preparando {mounted && cacheStats.totalEvents > 0 ? cacheStats.totalEvents.toLocaleString() : '2,000'} eventos para ti
                  </div>
                </div>
              </div>
            )}

            {/* Grid de juegos pr√≥ximos */}
            {!initialLoading && (
              <div className="mb-8">
                <div className="flex gap-6">
                  {/* Barra de Ligas - Lado Izquierdo */}
                  <div className="w-80 bg-gray-900/50 backdrop-blur rounded-xl p-4">
                    <h3 className="text-lg font-semibold text-white mb-4 flex items-center gap-2">
                      üèÜ Ligas Principales
                    </h3>
                    
                    <div className="space-y-4">
                      {/* F√∫tbol */}
                      <div>
                        <h4 className="text-sm font-medium text-green-400 mb-2 flex items-center gap-2">
                          ‚öΩ F√∫tbol
                        </h4>
                        <div className="space-y-1">
                          {['La Liga', 'Premier League', 'Serie A', 'Bundesliga', 'Champions League'].map(league => (
                            <button
                              key={league}
                              onClick={() => setSelectedLeague(league)}
                              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                                selectedLeague === league
                                  ? 'bg-green-600/20 text-green-300 border border-green-500/30'
                                  : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                              }`}
                            >
                              {league}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* Baloncesto */}
                      <div>
                        <h4 className="text-sm font-medium text-orange-400 mb-2 flex items-center gap-2">
                          üèÄ Baloncesto
                        </h4>
                        <div className="space-y-1">
                          {['NBA', 'Euroliga', 'NCAA', 'FIBA'].map(league => (
                            <button
                              key={league}
                              onClick={() => setSelectedLeague(league)}
                              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                                selectedLeague === league
                                  ? 'bg-orange-600/20 text-orange-300 border border-orange-500/30'
                                  : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                              }`}
                            >
                              {league}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* F√∫tbol Americano */}
                      <div>
                        <h4 className="text-sm font-medium text-purple-400 mb-2 flex items-center gap-2">
                          üèà F√∫tbol Americano
                        </h4>
                        <div className="space-y-1">
                          {['NFL', 'NCAA', 'CFL'].map(league => (
                            <button
                              key={league}
                              onClick={() => setSelectedLeague(league)}
                              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                                selectedLeague === league
                                  ? 'bg-purple-600/20 text-purple-300 border border-purple-500/30'
                                  : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                              }`}
                            >
                              {league}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* B√©isbol */}
                      <div>
                        <h4 className="text-sm font-medium text-red-400 mb-2 flex items-center gap-2">
                          ‚öæ B√©isbol
                        </h4>
                        <div className="space-y-1">
                          {['MLB', 'NPB', 'KBO'].map(league => (
                            <button
                              key={league}
                              onClick={() => setSelectedLeague(league)}
                              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                                selectedLeague === league
                                  ? 'bg-red-600/20 text-red-300 border border-red-500/30'
                                  : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                              }`}
                            >
                              {league}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* MMA */}
                      <div>
                        <h4 className="text-sm font-medium text-yellow-400 mb-2 flex items-center gap-2">
                          ü•ä MMA
                        </h4>
                        <div className="space-y-1">
                          {['UFC', 'Bellator', 'ONE Championship', 'PFL'].map(league => (
                            <button
                              key={league}
                              onClick={() => setSelectedLeague(league)}
                              className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                                selectedLeague === league
                                  ? 'bg-yellow-600/20 text-yellow-300 border border-yellow-500/30'
                                  : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                              }`}
                            >
                              {league}
                            </button>
                          ))}
                        </div>
                      </div>

                      {/* Bot√≥n Todas las Ligas */}
                      <div className="pt-2 border-t border-gray-700">
                        <button
                          onClick={() => setSelectedLeague('all')}
                          className={`w-full text-left px-3 py-2 rounded-lg text-sm transition-all duration-200 ${
                            selectedLeague === 'all'
                              ? 'bg-blue-600/20 text-blue-300 border border-blue-500/30'
                              : 'text-gray-300 hover:bg-gray-800/50 hover:text-white'
                          }`}
                        >
                          üåê Todas las Ligas
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Contenido Principal - Lado Derecho */}
                  <div className="flex-1">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <h2 className="text-xl font-semibold text-white">üî• Eventos Deportivos</h2>
                    {mounted && filteredEvents.length > 0 && (
                      <span className="bg-green-600/20 text-green-400 px-3 py-1 rounded-lg text-sm">
                        {mounted ? filteredEvents.length.toLocaleString() : '0'} evento{mounted && filteredEvents.length !== 1 ? 's' : ''} disponibles
                      </span>
                    )}
                  </div>
                  <div className="flex items-center space-x-3">
                    {mounted && cacheStats.totalEvents > 0 && (
                      <div className="flex items-center space-x-2">
                        <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                        {mounted && (
                          <span className="text-xs text-green-400">Cache activo ({cacheStats.totalEvents.toLocaleString()})</span>
                        )}
                      </div>
                    )}
                    {(loading || loadingMore) && (
                      <div className="flex items-center space-x-2">
                        <div className="w-4 h-4 border-2 border-blue-500 border-t-transparent rounded-full animate-spin"></div>
                        <span className="text-xs text-blue-400">{loadingMore ? 'Cargando m√°s...' : 'Procesando...'}</span>
                      </div>
                    )}
                    {error && (
                      <div className="flex items-center space-x-2">
                        <span className="text-xs text-red-400">‚ö†Ô∏è {error}</span>
                      </div>
                    )}
                  </div>
                </div>

                {displayedGames.length === 0 ? (
                  <div className="bg-[#2a2d47] border border-gray-600 rounded-xl p-8 text-center">
                    <div className="text-4xl mb-4">üèüÔ∏è</div>
                    <h3 className="text-xl font-semibold text-white mb-2">
                      {loading ? 'Cargando eventos...' : 'No hay eventos disponibles'}
                    </h3>
                    <p className="text-gray-400 mb-4">
                      {loading 
                        ? 'Obteniendo eventos deportivos de todas las fuentes...'
                        : 'No encontramos eventos que coincidan con tus filtros actuales.'
                      }
                    </p>
                    {!loading && (
                      <button 
                        onClick={() => {
                          setSelectedSport('all');
                          setSelectedLeague('all');
                          setSearchTerm('');
                          handleSearch('');
                        }}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors"
                      >
                        üîÑ Mostrar Todos
                      </button>
                    )}
                  </div>
                ) : (
                  <InfiniteScrollLoader
                    hasMore={hasMore}
                    loading={loadingMore}
                    onLoadMore={loadMore}
                    threshold={300}
                  >
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                      {displayedGames.map((game, index) => (
                        <div key={`${game.id}-${index}`} className={`bg-gradient-to-br ${game.bgColor} border border-gray-600 rounded-xl p-6 hover:border-gray-500 transition-all group hover:scale-105 relative overflow-hidden h-full flex flex-col min-h-[325px] w-full`} style={{ aspectRatio: '4/3' }}>
                      {/* Status indicator */}
                      <div className="absolute top-2 right-2">
                        <div className={`w-2 h-2 rounded-full ${
                          game.status === 'live' ? 'bg-red-500 animate-pulse' :
                          game.status === 'soon' ? 'bg-yellow-500 animate-pulse' : 'bg-blue-500'
                        }`}></div>
                      </div>

                      {/* Contenido principal */}
                      <div className="flex-1 flex flex-col">
                        {/* Header del evento */}
                        <div className="flex items-center justify-between mb-3">
                          <div className="flex items-center space-x-2">
                            <div className={`w-8 h-8 bg-[#2a2d47] rounded-lg flex items-center justify-center text-base ${game.color}`}>
                              {game.sportIcon}
                            </div>
                            <div>
                              <div className="text-sm text-gray-400">{game.sport}</div>
                              <div className="text-sm font-medium text-white">{game.league}</div>
                            </div>
                          </div>
                          <div className="text-right">
                            <div className={`text-xs font-bold ${game.color}`}>{game.volume}</div>
                            <div className="text-xs text-gray-400">{game.totalBets} retos</div>
                          </div>
                        </div>

                        {/* Equipos */}
                        <div className="mb-3 flex-1">
                          <div className="flex items-center justify-between">
                            <div className="flex items-center space-x-2 flex-1 min-w-0">
                              {isImageUrl(game.homeTeamLogo) ? (
                                <img 
                                  src={game.homeTeamLogo} 
                                  alt={game.homeTeam}
                                  className="w-6 h-6 object-contain"
                                  onError={(e) => {
                                    const img = e.target as HTMLImageElement;
                                    img.style.display = 'none';
                                    const fallbackSpan = document.createElement('span');
                                    fallbackSpan.className = 'text-base';
                                    fallbackSpan.textContent = '‚öΩ';
                                    img.parentNode?.appendChild(fallbackSpan);
                                  }}
                                />
                              ) : (
                                <span className="text-base">{game.homeTeamLogo}</span>
                              )}
                              <span className="text-xs text-white font-medium truncate">{game.homeTeam}</span>
                            </div>
                            <div className="mx-2 text-center">
                              <span className="text-xs text-gray-500 font-bold">VS</span>
                              <div className="text-xs text-gray-400 mt-1">{game.time}</div>
                            </div>
                            <div className="flex items-center space-x-2 flex-1 justify-end min-w-0">
                              <span className="text-xs text-white font-medium truncate">{game.awayTeam}</span>
                              {isImageUrl(game.awayTeamLogo) ? (
                                <img 
                                  src={game.awayTeamLogo} 
                                  alt={game.awayTeam}
                                  className="w-6 h-6 object-contain"
                                  onError={(e) => {
                                    const img = e.target as HTMLImageElement;
                                    img.style.display = 'none';
                                    const fallbackSpan = document.createElement('span');
                                    fallbackSpan.className = 'text-base';
                                    fallbackSpan.textContent = '‚öΩ';
                                    img.parentNode?.appendChild(fallbackSpan);
                                  }}
                                />
                              ) : (
                                <span className="text-base">{game.awayTeamLogo}</span>
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Informaci√≥n del partido */}
                        <div className="mb-3">
                          <div className="text-center">
                            <div className="text-sm text-gray-300 mb-2">{game.date}</div>
                            <div className="text-base text-gray-200 mb-2 font-medium">{game.time}</div>
                            <div className={`text-sm px-2 py-1 rounded inline-block ${
                              game.status === 'live' ? 'text-red-400 bg-red-900 bg-opacity-20 font-bold' :
                              game.status === 'soon' ? 'text-yellow-400 bg-yellow-900 bg-opacity-20 font-bold' : 'text-blue-400 bg-blue-900 bg-opacity-20'
                            }`}>
                              {game.status === 'live' ? 'üî¥ EN VIVO' :
                               game.status === 'soon' ? `‚è∞ ${game.minutesToStart}min` :
                               `${Math.floor(game.minutesToStart * 0.0167)}h`}
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Bot√≥n de acci√≥n */}
                      <div className="pt-2 border-t border-gray-600 mt-auto">
                        <Link href={`/sports/create?matchId=${game.id}&matchTitle=${encodeURIComponent(game.homeTeam + ' vs ' + game.awayTeam)}&teams=${encodeURIComponent(game.homeTeam + ' vs ' + game.awayTeam)}&date=${encodeURIComponent(game.date)}&time=${encodeURIComponent(game.time)}&league=${encodeURIComponent(game.league)}&sport=${encodeURIComponent(game.sport)}${gameCount > 1 ? `&gameCount=${gameCount}` : ''}`}>
                          <button className="w-full py-2 px-3 rounded-lg transition-all font-medium text-sm bg-blue-600 hover:bg-blue-700 text-white group-hover:shadow-lg hover:scale-[1.02]">
                            ‚ûï Crear Reto
                          </button>
                        </Link>
                      </div>
                    </div>
                  ))}
                    </div>
                  </InfiniteScrollLoader>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Footer */}
      <Footer />
    </div>
  );
}